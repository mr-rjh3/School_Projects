package nguy7710_a01;


import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class GUI extends JPanel {
	int Packets = 0;
	JTextField Address = new JTextField("");
	JTextField SenderPort = new JTextField("");
	JTextField RecieverPort = new JTextField("");
	JTextField FileName = new JTextField("");
	JTextField Timeout = new JTextField("");
	JTextField PacketNum = new JTextField(Integer.toString(Packets));
	
	
	
	public GUI() {
		try {
			
			// SEND BUTTON INCOMPLETE~ Currently increments packet number for testing purposes
				// Will need to give The sender program the following variables:
				// Address, SenderPort, RecieverPort, FileName, and Timeout
			JButton bSend = new JButton("Send File");
			bSend.addActionListener(new ActionListener() {
			    public void actionPerformed(ActionEvent e) {
			        PacketNum.setText(Integer.toString(++Packets));
			    }
			});
			
			// ALIVE BUTTON INCOMPLETE ~ Currently increments packet number for testing purposes
				// Will need to ping server program to see if it is currently up to send data over
			JButton bAlive = new JButton("Alive?");
			bAlive.addActionListener(new ActionListener() {
			    public void actionPerformed(ActionEvent e) {
			        PacketNum.setText(Integer.toString(++Packets));
			    }
			});
			
			JFrame connectionWindow = new JFrame();			// Create Window
			JPanel connectionPanel = new JPanel();			// Create Frame
			
			// TEXTFIELD LABELS
			// These are all the textfields to the left of the input textfields being defined
			
			// Address Field
			JTextField get_address = new JTextField("IP of Server:");
			get_address.setEditable(false);
			
			// Sender Port Field
			JTextField get_senderport = new JTextField("Connect at Sender Port:");
			get_senderport.setEditable(false);
			
			// Receiver port Field
			JTextField get_receiverport = new JTextField("Connect at Reciever Port:");
			get_receiverport.setEditable(false);
			
			// Filename Field
			JTextField get_filename = new JTextField("File Name:");
			get_filename.setEditable(false);
			
			// Timeout Field
			JTextField get_timeout = new JTextField("Length Until Timeout in Milliseconds:");
			get_timeout.setEditable(false);
			
			// Packet Number Field
			JTextField PacketNumLabel = new JTextField("Current Number of Sent In-Order Packets:");
			PacketNumLabel.setEditable(false);
			PacketNum.setEditable(false);
			
			connectionPanel.setLayout(new GridBagLayout());
			connectionPanel.setBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30));
			GridBagConstraints gbc = new GridBagConstraints();
			gbc.fill = GridBagConstraints.BOTH;
			gbc.weightx = 1;
			
			connectionWindow.setSize(600, 500);
			connectionWindow.add(connectionPanel);	
			
			connectionPanel.add(PacketNumLabel, gbc);
			connectionPanel.add(PacketNum, gbc);
			gbc.gridy = 1;
			connectionPanel.add(get_address, gbc);
			connectionPanel.add(Address, gbc);
			gbc.gridy = 2;
			connectionPanel.add(get_senderport, gbc);
			connectionPanel.add(SenderPort, gbc);
			gbc.gridy = 3;
			connectionPanel.add(get_recieverport, gbc);
			connectionPanel.add(RecieverPort, gbc);
			gbc.gridy = 4;
			connectionPanel.add(get_filename, gbc);
			connectionPanel.add(FileName, gbc);
			gbc.gridy = 5;
			connectionPanel.add(get_timeout, gbc);
			connectionPanel.add(Timeout, gbc);
			gbc.gridy = 6;
			connectionPanel.add(bAlive, gbc);
			connectionPanel.add(bSend, gbc);
			
			
			connectionWindow.setTitle("Connect to Server..");
			connectionWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			connectionWindow.setVisible(true);
		}
		catch(Exception e) {
			System.out.println("ERROR!!");
		}
	}
	    			
//	    			String hostName = Address.getText();
//		    		int portNumber = Integer.parseInt(SenderPort.getText());
//	    			Socket clientSocket = new Socket (hostName, portNumber);
//	    			
//	    			PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
//	    			BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
//	    			BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
//	    			
//	    			String userInput;
//	    			while((userInput = stdIn.readLine()) != null) {
//	    				out.println(userInput);
//	    				System.out.println("echo: " + in.readLine());
//	    			}
//
//	    			stdIn.close();
//	    			in.close();
//	    			out.close();
//	    			clientSocket.close();
	    			
//	    		}catch(UnknownHostException e) {
//	    			System.err.println("brhhruh wrong host stoopid");
//	    		}catch(IOException e) {
//	    			System.err.println("bro I/O shizz going on what?");
//	    		}catch(Exception e) {
//	    			System.err.println("bro wtf u even doing man");
//	    		}
//	    		
//	    	}
//	    	                    
//	       }
    }
