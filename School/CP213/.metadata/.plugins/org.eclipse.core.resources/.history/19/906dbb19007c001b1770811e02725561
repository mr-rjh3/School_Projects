package cp213;

/**
 * A simple linked list structure of <code>Node T</code> objects. Only the
 * <code>T</code> data contained in the stack is visible through the standard
 * list methods. Extends the <code>SingleLink</code> class, which already
 * defines the head node, length, iterator, and toArray.
 *
 * @author your name here
 * @version 2021-02-05
 * @param <T> this SingleList data type.
 */
public class SingleList<T extends Comparable<T>> extends SingleLink<T> {

    /**
     * Searches for the first occurrence of key in this SingleList. Private helper
     * methods - used only by other ADT methods.
     *
     * @param key The value to look for.
     * @return A pointer to the node previous to the node containing key.
     */
    private SingleNode<T> linearSearch(final T key) {
    	SingleNode<T> curr = this.front;	// set current to front of list
    	if(!this.isEmpty() && this.length > 1 && curr.getData() != key) {	// If list is not empty, has more than one value, or the front is not the key value
	    	while(curr.getNext().getNext() != null && curr.getNext().getData().compareTo(key) != 0) // If the next node has the key value or the node after that is null end loop
	    		curr = curr.getNext();	// Advances current node
	    	if(curr.getNext().getData().compareTo(key) != 0) // after while loop if value after current is not the key value it is not in the list
	    		curr = null;
    	}
    	else if(curr != null && curr.getData() != key) {	// Special case: if key value is the first value of the list
    		curr = null;	// If list only has one value and it is not the key value current = null
    	}					// If the first value is the key value then return the node it is in because there is no previous node
    		
    	return curr;
    }

    /**
     * Appends data to the end of this SingleList.
     *
     * @param data The data to append.
     */
    public void append(final T data) {

    	SingleNode<T> node = new SingleNode<T>(data, null);
    	if(this.isEmpty()) {
    		this.front = node;
    	}
    	else {
    		this.rear.setNext(node);
    	}
    	this.rear = node;
    	
    	this.length++;
    }

    /**
     * Removes duplicates from this SingleList. The list contains one and only one
     * of each value formerly present in this SingleList. The first occurrence of
     * each value is preserved.
     */
    public void clean() {
    	// your code here

    }

    /**
     * Combines contents of two lists into a third. Values are alternated from the
     * origin lists into this SingleList. The origin lists are empty when finished.
     * NOTE: data must not be moved, only nodes.
     *
     * @param left  The first list to combine with this SingleList.
     * @param right The second list to combine with this SingleList.
     */
    public void combine(final SingleList<T> left, final SingleList<T> right) {

	// your code here

    }

    /**
     * Determines if this SingleList contains key.
     *
     * @param key The key value to look for.
     * @return true if key is in this SingleList, false otherwise.
     */
    public boolean contains(final T key) {

	// your code here

    }

    /**
     * Finds the number of times key appears in list.
     *
     * @param key The value to look for.
     * @return The number of times key appears in this SingleList.
     */
    public int count(final T key) {

	// your code here

    }

    /**
     * Finds and returns the value in list that matches key.
     *
     * @param key The value to search for.
     * @return The value that matches key, null otherwise.
     */
    public T find(final T key) {

	// your code here

    }

    /**
     * Get the nth item in this SingleList.
     *
     * @param n The index of the item to return.
     * @return The nth item in this SingleList.
     * @throws ArrayIndexOutOfBoundsException if n is not a valid index.
     */
    public T get(final int n) throws ArrayIndexOutOfBoundsException {

	// your code here

    }

    /**
     * Determines whether two lists are identical.
     *
     * @param source The list to compare against this SingleList.
     * @return true if this SingleList contains the same values in the same order as
     *         source, false otherwise.
     */
    public boolean identical(final SingleList<T> source) {

	// your code here

    }

    /**
     * Finds the first location of a value by key in this SingleList.
     *
     * @param key The value to search for.
     * @return The index of key in this SingleList, -1 otherwise.
     */
    public int index(final T key) {

	// your code here

    }

    /**
     * Inserts data into this SingleList at index i. If i greater than the length of
     * this SingleList, append value to the end of this SingleList.
     *
     * @param i    The index to insert the new value at.
     * @param data The new value to insert into this SingleList.
     */
    public void insert(int i, final T data) {

	// your code here

    }

    /**
     * Inserts data into the front of this SingleList.
     *
     * @param data The value to insert into the front of this SingleList.
     */
    public void prepend(final T data) {

	// your code here

    }

    /**
     * Finds the maximum value in this SingleList.
     *
     * @return The maximum value.
     */
    public T max() {

	// your code here

    }

    /**
     * Finds the minimum value in this SingleList.
     *
     * @return The minimum value.
     */
    public T min() {

	// your code here

    }

    /**
     * Finds, removes, and returns the value in this SingleList that matches key.
     *
     * @param key The value to search for.
     * @return The value matching key, null otherwise.
     */
    public T remove(final T key) {
    	
    	SingleNode<T> curr = this.linearSearch(key);
    	T value = null;
    	if(this.length > 0 && curr != null) {	// List is not empty and key is in list
	    	if(curr.getData() != key) { // Normal case
	    		value = curr.getNext().getData(); // The value is the data in the node after current node
	    		
	    		if(this.rear.getData() == curr.getNext().getData()) // If data is at rear (set new rear)
	    			this.rear = curr;		// New rear becomes current node
	    		
	    		curr.setNext(curr.getNext().getNext());			// The node after the key value node becomes the new node after current node
	    		
	    	}
	    	else if(curr.getData() == key) { // Special Case: If the key is in the front node
	    		
	    		value = curr.getData();	// The value to return becomes the current node value
	    		
	    		if(this.length == 1) {	// If there is only one node in the list, it will become empty
	    			this.front = null;
	    			this.rear = null;	
	    		}
	    		else {	// If there is more than one node left in the list
	    			this.front = this.front.getNext();	// The front becomes the one after the previous front
	        		
	    		}
	    		
	    	}
	    	this.length--;	// As long as the list is not empty the length will decrease by one
    	}
    	
    	return value;
    }

    /**
     * Removes the value at the front of this SingleList.
     *
     * @return The value at the front of this SingleList.
     */
    public T removeFront() {

	// your code here

    }

    /**
     * Reverses the order of the values in this SingleList.
     */
    public void reverse() {

	// your code here

    }

    /**
     * Splits the contents of this SingleList into the left and right SingleLists.
     * Moves nodes only - does not move data or call the high-level methods insert
     * or remove. this SingleList is empty when done. The first half of this
     * SingleList is moved to left, and the last half of this SingleList is moved to
     * right. If the resulting lengths are not the same, left should have one more
     * item than right. Order is preserved.
     *
     * @param left  The first SingleList to move nodes to.
     * @param right The second SingleList to move nodes to.
     */
    public void split(final SingleList<T> left, final SingleList<T> right) {

	// your code here

    }

    /**
     * Splits the contents of this SingleList into the left and right SingleLists.
     * Moves nodes only - does not move data or call the high-level methods insert
     * or remove. this SingleList is empty when done. Nodes are moved alternately
     * from this SingleList to left and right. Order is preserved.
     *
     * @param left  The first SingleList to move nodes to.
     * @param right The second SingleList to move nodes to.
     */
    public void splitAlternate(final SingleList<T> left, final SingleList<T> right) {

	// your code here

    }

    /**
     * Creates a union of two other SingleLists into this SingleList. Copies data to
     * this list. left and right SingleLists are unchanged.
     *
     * @param left  The first SingleList to create a union from.
     * @param right The second SingleList to create a union from.
     */
    public void union(final SingleList<T> left, final SingleList<T> right) {

	// your code here

    }
}