package cp213;

/**
 * Sample testing for Assignment 3 Data Structures.
 *
 * @author your name here
 * @version 2021-02-05
 */
public class A03Main {

    /**
     * Note that not all the data structure methods are called in this main. The
     * main method is just an illustration of how you may test your code. Test your
     * code thoroughly.
     *
     * When you start, comment out all code in the main, and un-comment as you add
     * code to the class.
     *
     * @param args (unused)
     */
    public static void main(String[] args) {
	final String LINE = new String(new char[40]).replace("\0", "-");
	
	
//	SingleList<Integer> list = new SingleList<>();
//	System.out.println(LINE);
//	System.out.println("SingleList");
//	System.out.println("Empty: " + list.isEmpty());
//	System.out.print("Add values: ");
//
//	for(int i = 0; i < 6; i++)
//		list.append(i);
//	
//	System.out.println();
//	System.out.println("Empty: " + list.isEmpty());
//	System.out.println("Peek: " + list.peek());
//	System.out.print("Remove: ");
//	
//	System.out.print(list.remove(6));
//	
//	System.out.print(list.remove(0));
//	System.out.print(list.remove(3));
//	System.out.print(list.remove(2));
//	System.out.print(list.remove(5));
//	System.out.print(list.remove(1));
//	System.out.print(list.remove(4));
//	
//	System.out.print(list.remove(6));

	


	// Test SingleStack
	SingleStack<Integer> stack = new SingleStack<>();
	System.out.println(LINE);
	System.out.println("SingleStack");
	System.out.println("Empty: " + stack.isEmpty());
	System.out.println("Add values: ");

	for (int i = 0; i < 6; i++) {
	    stack.push(i);
	}
	System.out.println("Empty: " + stack.isEmpty());
	System.out.println("Peek: " + stack.peek());
	System.out.println("Clear stack:");

	while (!stack.isEmpty()) {
	    System.out.println("Popped: " + stack.pop());
	}

	// Test SingleQueue
	SingleQueue<Integer> target = new SingleQueue<>();
	SingleQueue<Integer> queue_left = new SingleQueue<>();
	SingleQueue<Integer> queue_right = new SingleQueue<>();
	System.out.println(LINE);
	System.out.println("SingleQueue");
	System.out.println("Empty: " + target.isEmpty());
	System.out.println("Add values:");

	queue_left.insert(1);
	queue_right.insert(2);
	queue_left.insert(3);
	queue_right.insert(4);
	queue_right.insert(5);
	queue_right.insert(6);
	queue_right.insert(7);

	target.combine(queue_left, queue_right);
	
	System.out.println("Empty: " + target.isEmpty());
	System.out.println("Peek: " + target.peek());

	// Test SinglePriorityQueue
	SinglePriorityQueue<Integer> pq = new SinglePriorityQueue<>();
	System.out.println(LINE);
	System.out.println("SinglePriorityQueue");
	System.out.println("Empty: " + pq.isEmpty());
	System.out.println("Add values:");

	for (int i = 5; i >= 0; i--) {
	    pq.insert(i);
	}
	System.out.println("Empty: " + pq.isEmpty());
	System.out.println("Peek: " + pq.peek());
	System.out.println("Clear queue:");

//
//	// Test SingleList
//	SingleList<Integer> list = new SingleList<>();
//	System.out.println(LINE);
//	System.out.println("SingleList");
//	System.out.println("Empty: " + list.isEmpty());
//	System.out.println("Add values:");
//
//	for (int i = 0; i < 6; i++) {
//	    list.append(i);
//	}
//	System.out.println("Empty: " + list.isEmpty());
//	System.out.println("Peek: " + list.peek());
//	System.out.println("Clear list:");
//
//	while (!list.isEmpty()) {
//	    System.out.println("Removed: " + list.removeFront());
//	}
//	System.out.println(LINE);
	}

}